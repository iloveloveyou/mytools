server
  {
	listen       80;
	server_name  jkw.lo;
	index index.html index.htm index.lua index.php;
	#root  /opt/htdocs/jkw/www;
	root  /opt/htdocs_c/lua;
	default_type 'text/plain';

#	drizzle_connect_timeout    500ms; # default 60s
#	drizzle_send_query_timeout 2s;    # default 60s
#	drizzle_recv_cols_timeout  1s;    # default 60s
#	drizzle_recv_rows_timeout  1s;    # default 60s

#	location =/query {
		#drizzle_query 'select sleep(10)';
		#drizzle_pass my_backend;
		#rds_json on;
		#more_set_headers -s 504 'X-Mysql-Tid: $drizzle_thread_id'; 
#		set $my_sql 'select * from `items`';
#		drizzle_query $my_sql;
#		drizzle_pass cluster;
#		rds_json on;
#		#rds_csv on;
		#rds_csv_row_terminator "\n"; # default to "\r\n"
		#rds_csv_field_separator ',';
		
#	}
#	location /mysql-pool-status {
#		drizzle_status;
#	}
 
	location /main {
	content_by_lua '
	    local res = ngx.location.catpure("/query")
	    if res.status ~= ngx.HTTP_OK then
		local tid = res.header["X-Mysql-Tid"]
		if tid and tid ~= "" then
		    ngx.location.capture("/kill", { args = {tid = tid} })
		end
		return ngx.HTTP_INTERNAL_SERVER_ERROR;
	    end
	    ngx.print(res.body)
	    ';
	}
	if (!-e $request_filename) {
		rewrite ^/(\w+)$ /index.lua?c=$1&a=index;
		rewrite ^/(\w+)/(\w+)/?(.*)$ /index.lua?c=$1&a=$2&$3 break;
	}
   	location ~ ^(.+).lua {
		more_set_headers 'Content-Type: text/plain';
		lua_need_request_body on;
		client_max_body_size 100k;
		client_body_buffer_size 100k;
		content_by_lua_file $document_root$1.lua;
		#content_by_lua_file /opt/htdocs/jkw/www/foo.lua;
	}
	location = /redis {
		internal;
		set_unescape_uri $key $arg_key;
		redis2_query get $key;
		redis2_pass 127.0.0.1:6379;
	}
	location = /luarocks {
		more_set_headers 'Content-Type: text/plain';
		content_by_lua '
		 ngx.say(package.path)
		 ngx.say("<br>")
		 ngx.say(package.cpath);
		';
		#echo $document_root;
	}
	location /request_body {
	     # force reading request body (default off)
	     lua_need_request_body on;
	     client_max_body_size 50k;
	     client_body_buffer_size 50k;
	     content_by_lua 'ngx.print(ngx.var.request_body)';
	}
	location = /test.htm
	{
		content_by_lua '
		    ngx.say("<p>hello, world! zjl!</p>")
		';
		 set $a 32;
		set $b 56;
		set_by_lua $res
		    'return tonumber(ngx.arg[1]) + tonumber(ngx.arg[2])'
		    $a $b;
		echo $res;
	}
	location /set {
		content_by_lua '
		    local dogs = ngx.shared.dogs
		    dogs:set("Jim", 8)
		    ngx.say("STORED")
		';
	}
	location /get {
		content_by_lua '
		    local dogs = ngx.shared.dogs
		    ngx.say(dogs:get("Jim"))
		';
	}
	location ~ .+\.php{
		include "extend/fcgi.conf";
	}
}




 

